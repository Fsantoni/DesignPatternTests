Info Utili
	1 Il  flusso di controllo dipende da quale funzione è chiamata nel main
	2 Le relazioni fra classi possono non essere esplicitate in un puntatore o variabile, ma dipendere dai parametri passati nelle chiamate ai loro metodi, 
	3 Topologia ovvero rapporti fra oggetti è dinamica: solo alla creazione di un oggetto viene deciso quale altro oggetto esso contenga o con quali altri oggetti si rapporti
	4 Stato e concorrenza: le variabili di oggetti mantengono stato, ed hanno durata di vita globale <- DA TESTARE QUASI SEMPRE
	5 Polimorfismo: porta complicazioni e incertezze nell'esecuzione per la presenza di differenti "stesse" funzioni, DA TESTARE

Adapter:

data una classe legacy(CHE SUPPONGO CORRETTA) voglio permetterne l'accesso con una particolare interfaccia ed eventualmente aggiungere funzionalità 

- Class Adapter
 	- la nuova classe non è istanza della legacy o del interfaccia-> va testato che tipo di classe è Adapter rispetto Adaptee
 	- l'interfaccia non permette di operare sulla classe -> vanno testate i metodi pubblici dell'interfaccia TargetInterfaces

 -Object Adapter
 	-l'interfaccia non permette di operare sulla classe -> vanno testati i metodi pubblici
 	-l'oggetto contenuto non è un legacy.
 	-i metodi dell'oggetto contenuto, poichè considero solo l'implementazione standard dei metodi legacy per realizzare la nuova interfaccia, se hanno overloads danno problemi

Decorator:
 
 aggiunge dinamicamente responsabilità ad un oggetto in modo da estenderne le funzionalità. E' visto come evoluzione
 del Pattern Proxy verso una struttura ripetitiva.
 
 - errore nel riferimento, nullo o sbagliato. La serie di decorazioni è tagliata prematuramente o inesatta
 
Proxy:
 
 fornisce rappresentazione di un oggetto di accesso difficle o che richiede un tempo importante per l'accesso.
 
 - accesso al RealSubject o sua creazione porta a errori
 	ci interessa che i metodi funzionino sempre, in particolare è realizzabile con un all use su RealSubject field
 	(tecnicamente anche su fileName ma non ha la stessa criticità)
 	
 
Observer:
 
 consente la definizione di associazioni di dipenenza di molti oggetti verso di uno, in modo che se quest'ultimo
 cambia il suo stato, tutti gli altri sono notificati e aggiornati automaticamente
 
 - attach/detach non funzionano (se aggiorno, aggiorno tutti quelli che hanno fatto attach e non hanno ancora fatto detach)
 - notify non viene chiamato
 - update non esegue una volta chiamato
 
 
Visitor:
 
 rappresenta un'operazione da essere eseguita in una collezione di elementi di una struttura.
 
 - Se viene inserita una nuova classe Visitable ma non ho il corrispondente visit
 	
State:
 
consente ad un oggetto modificare il suo comportamento quando il suo stato interno cambia

- la classe non si comporta come il suo stato interno vorrebbe (voglio testare ogni situazione in cui cambi lo stato interno)


Composite: 

consente la costruzione di gerarchie di oggetti composti

- operation() su strutture particolari non funziona
-(2) add e remove si comportano in maniera non conforme se applicati: errore su Leaf ed errori su vettore di Composite 
 